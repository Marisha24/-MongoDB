Тема 1. Введение в noSQL
#### Понятие noSQL
 Несмотря на многочисленные преимущества реляционных баз данных, они обладают определёнными недостатками. Проблемы начали возникать практически сразу после их появления. Одной из главных трудностей для программистов стало несоответствие (impedance mismatch), возникающее между реляционной моделью данных и внутренними структурами приложения. Согласно реляционному подходу, информация представлена в виде таблиц и записей, формально называемых отношениями и кортежами соответственно (кортеж — набор пар ключ-значение, отношение — совокупность таких кортежей).
  Реляционная теория баз данных основана на понятии реляционной алгебры (алгебры отношений). Объектами в ней выступают отношения. Рассмотрим пример одной из операции реляционной алгебры - фильтрации:
  Фильтрацией отношения R по условия a(r) называется отношение, содержащее только те кортежи из R, для которых истинно a(r). 
  R[a(r)] = {r|r **∈**  R **∧** a(r)}
  Условие a(r) может содержать термы сравнения (=, <>, <=, >=, <,>), константы, логические связки, скобки. 
  Пример: 
  ![[Диаграмма без названия (1) 1.jpg]]
  Рисунок 1 - Фильтрация по столбцу "Пол"
 
 Далее рассмотрим  понятие нереляционных баз данных. 
 
 Нереляционные базы данных  представляют собой хранилища информации, в которых отсутствует традиционная таблица с фиксированными строками и колонками. Они используют специализированные модели организации данных, адаптированные именно под специфику конкретных типов хранимой информации.
 **NoSQL** («не только SQL») — это концепция проектирования баз данных, отличающаяся от классических реляционных решений (SQL) методами хранения и управления информацией. Если традиционные реляционные системы организуют данные в строгие таблицы с заранее заданными полями, то NoSQL-базы применяют гибкие структуры вроде документов, ключевых значений, графовых связей или широких колонок.
 Отметим очевидный факт: базы данных NoSQL не используют язык SQL. Некоторые из них имеют свой язык запросов, и их целесообразно было бы сделать похожим на SQL, чтобы их легче было изучить. К таким языкам относится CQL в базе данных Cassandra - "очень похожий на SQL (за исключением отличий)" [CQL]. Однако до сих пор не был реализован ни один язык, который бы достиг хотя бы той же степени гибкости, что и стандартный язык SQL.
Аббревиатура NoSQL - это случайный неологизм. У него нет четкого определения, и мы можем лишь указать его основные характеристики.
  **Основные характеристики NoSQL:**
- **Нереляционная структура:** данные могут храниться в виде документов (например, JSON), пар ключ-значение, графов или широких колонок, что обеспечивает гибкость в моделировании данных.
- **Отсутствие фиксированной схемы:** NoSQL-базы данных часто не требуют заранее определённой структуры данных, что позволяет легко работать с неструктурированными и полуструктурированными данными.
- **Масштабируемость и производительность:** такие базы данных хорошо подходят для работы с большими объёмами данных и обеспечивают высокую скорость обработки запросов, особенно при горизонтальном масштабировании.

Две основные причины изучить технолоrии NoSQL. Первая причина - это необходимость обеспечить доступ к данным, объем которых и требования к производительности вынуждают использовать кластеры; вторая причина - повысить производительность разработки приложений с помощью более удобноrо способа обеспечения обмена данными.

#### CAP теорема

  **CAP-теорема** — это фундаментальное утверждение в теории распределённых систем, сформулированное Эриком Брюэром в 2000 году. Она описывает ограничения, с которыми сталкиваются разработчики при проектировании распределённых баз данных, включая NoSQL-системы.
  Согласно CAP-теореме, в любой распределённой системе невозможно одновременно обеспечить выполнение всех трёх следующих свойств:

- **Согласованность (Consistency):** Все узлы системы в любой момент времени видят одни и те же данные. После выполнения операции записи все последующие чтения возвращают обновлённое значение.
- **Доступность (Availability):** Каждый запрос к системе получает корректный (но не обязательно самый свежий) ответ, даже если часть узлов недоступна.
- **Устойчивость к разделению (Partition tolerance):** Система продолжает работать, несмотря на произвольное разделение сети или потерю связи между её частями.

В условиях сетевых сбоев (разделения сети) система может гарантировать только два из трёх свойств одновременно. Например:

- CA — обеспечивает консистентность и доступность, жертвуя устойчивостью к разрывам сети;
- CP — поддерживает консистентность и устойчивость к разрывам, теряя полную доступность узлов;
- AP — сохраняет доступность и устойчивость к разрывам, допуская временную потерю консистентности.

Рассмотрим теорему CAP на практике. Выберем достаточно популярные системы баз данных: Postgresql, MongoDB, Cassandra.
**Рассмотрим Postgresql**
Следующие пункты относятся к абстрактной распределенной БД Postgresql.  
- Репликация Master-Slave — одно из распространенных решений
- Синхронизация с Master в асинхронном / синхронном режиме
- Система транзакций использует двухфазный коммит для обеспечения consistency
- Если возникает partition, вы не можете взаимодейстовать с системой (в основном случае)
Таким образом, система не может продолжать работу в случае partition, но обеспечивает strong consistency и availability. Это система CA. 
  
**Рассмотрим MongoDB**
Следующие пункты относятся к абстрактной распределенной БД MongoDB.
- MongoDB обеспечивает strong consistency, потому что это система с одним Master узлом, и все записи идут по умолчанию в него.
- Автоматическая смена мастера, в случае отделения его от остальных узлов.
- В случае разделения сети, система прекратит принимать записи до тех пор, пока не убедится, что может безопасно завершить их.
Таким образом, система может продолжать работу в случае разделения сети, но теряется CAP-availability всех узлов. Это CP система.

**Рассмотрим Cassandra**
Cassandra использует схему репликации master-master, что фактически означает AP систему, в которой разделение сети приводит к самодостаточному функционированию всех узлов.
![[Pasted image 20250806154827.png]]

CAP-теорема помогает разработчикам осознанно выбирать архитектурные решения, исходя из приоритетов приложения: что важнее — согласованность, доступность или устойчивость к сбоям. Это особенно актуально для NoSQL-баз данных, которые часто проектируются с учётом масштабируемости и высокой доступности. 


#### Виды noSQL СУБД
NoSQL СУБД (Not Only SQL) — это класс систем управления базами данных, которые предназначены для хранения, обработки и масштабирования больших объёмов данных, часто с гибкой структурой. В отличие от традиционных реляционных СУБД, NoSQL-системы не требуют строгой схемы данных и хорошо подходят для распределённых и высоконагруженных приложений.
 Большинство баз данных NoSQL создавались в ответ на необходимость работать на кластерах.  Для обеспечения согласованности данных во всей базе данных реляционные базы данных используют транзакции ACID. Это изначально противоречит кластерной среде, поэтому базы данных предлагают спектр вариантов для обеспечения согласованности и распределения данных. Однако не все базы данных NoSQL строго ориентируются на работу с кластерами. 
 **Графовые базы данных**  представляют собой базы данных NoSQL, использующие распределенную модель, похожую на реляционную базу данных, но предлагающие другую модель данных, которая лучше обрабатывает данные со сложными отношениями.
 Граф — это множество вершин (узлов, node) и ребер (взаимосвязей, edge). Вершины представляют сущности, а ребра — связи, в атрибутах которых может содержаться информация.  
  Графовая база данных моделирует сущности в виде графа в том виде, как это определено в теории графов. Структуры данных — это вершины и ребра. Атрибуты — это свойства вершин и ребер. Связь — это соединение вершин.  
  В отличие от других моделей данных, в графовых базах данных в приоритете взаимосвязи между сущностями. Поэтому не требуется вычислять связи с помощью внешних ключей или какими-то другими способами. Можно создавать сложные модели данных, используя только абстракции вершин и ребер.
 Эта технология уже довольно широко используется в IT-индустрии в таких областях, как социальные сети, антифрод-системы, анализ ИТ-сетей, социальные рекомендации, рекомендации по продуктам и контенту.
 ![[Pasted image 20250806161629.png]]

Следующий тип NoSQL баз данных - **колонко-ориентированные (колоночные)**
Это особый тип СУБД, в которых информация организуется и хранится по столбцам, а не по строкам, как в традиционных реляционных базах.
Основная идея колоночных СУБД — это хранение данных не по строкам, как это делают традиционные СУБД, а по колонкам. Это означает, что с точки зрения SQL-клиента данные представлены как обычно в виде таблиц, но физически эти таблицы являются совокупностью колонок, каждая из которых по сути представляет собой таблицу из одного поля. При этом физически на диске значения одного поля хранятся последовательно друг за другом — приблизительно так:  
  [A1, A2, A3], [B1, B2, B3], [C1, C2, C3] и т.д.
Такая организация данных приводит к тому, что при выполнении select в котором фигурируют только 3 поля из 50 полей таблицы, с диска **физически** будут прочитаны только 3 колонки. Это означает что нагрузка на канал ввода-вывода будет приблизительно в 50/3=17 раз меньше чем при выполнении такого же запроса в традиционной СУБД.
![[Pasted image 20250806164407.png]]

**Документо-ориентированные базы данных**
Документоориентированные базы данных отличаются от остальных видов тем, что они работают с так называемыми «документами», объединенными в коллекции. Под документом понимается набор атрибутов, состоящий из ключей и соответствующих им значений. Значением атрибута может выступать простой тип данных (например, строка, число или дата), либо сложный элемент, включающий вложенные объекты, массивы или ссылки на другие документы. 
Одной из важнейших характеристик документоориентированных баз является отсутствие жесткой схемы данных. Благодаря этому можно добавлять новые поля в конкретные документы, не затрагивая всю базу целиком и не заставляя другие записи соответствовать единой структуре. Адресация документов осуществляется посредством уникальных ключей, которые зачастую создаются автоматически и служат для извлечения или ссылок на другие документы.
Кроме того, важной особенностью документоориентированных баз данных является поддержка специализированных языков запросов. Хотя документы можно искать по ключу аналогично key-value базам, дополнительно предоставляется развитый инструментарий для выполнения сложных запросов, функциональность и производительность которого зависят от конкретной реализации базы данных. Тот факт, что такие базы данных работают без схемы, делает простой задачей добавление полей в JSON-документы без необходимости сначала заявлять об изменениях.
![[Pasted image 20250806164758.png]]

Последний тип БД - **Ключ-значение (Key-Value) хранилища**
**Хранилища «ключ-значение» (Key-Value)** — это тип баз данных NoSQL, которые хранят данные в виде **пар «ключ-значение»**. В качестве ключа используется уникальный идентификатор, по которому осуществляется доступ к ассоциированным данным — значению. Значение может быть представлено строкой, числом или объектом.
Такие хранилища используются для хранения изображений, создания специализированных файловых систем, в качестве кэшей для объектов, а также в системах, спроектированных с прицелом на масштабируемость.
![[Pasted image 20250806170432.png]]

Если поразмыслить о теореме CAP, то становится довольно очевидно, что такие хранилища хороши в плане доступности (Availability) и устойчивости к разделению (Partition tolerance), но явно проигрывают в согласованности данных (Consistency).
И хотя базы данных типа «ключ-значение» могут пригодиться в определённых ситуациях, они не лишены недостатков. Первый заключается в том, что модель не предоставляет стандартные возможности баз данных вроде атомарности транзакций или согласованности данных при одновременном выполнении нескольких транзакций. Такие возможности должны предоставляться самим приложением.
Второй недостаток в том, что при увеличении объёмов данных, поддержание уникальных ключей может стать проблемой. Для её решения необходимо как-то усложнять процесс генерации строк, чтобы они оставались уникальными среди очень большого набора ключей.
